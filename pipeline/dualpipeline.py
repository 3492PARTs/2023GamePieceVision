import cv2
import numpy as np
import math
from enum import Enum

class DualPipeline:
    """
    An OpenCV pipeline generated by GRIP.
    """
    
    def __init__(self):
        """initializes all values to presets or None if need to be set
        """

        self.__resize_image_width = 640.0
        self.__resize_image_height = 480.0
        self.__resize_image_interpolation = cv2.INTER_CUBIC

        self.resize_image_output = None

        self.__hsv_threshold_0_input = self.resize_image_output
        self.__hsv_threshold_0_hue = [19.424460431654676, 66.16392394951268]
        self.__hsv_threshold_0_saturation = [89.43345323741006, 255.0]
        self.__hsv_threshold_0_value = [165.18996667073122, 255.0]

        self.hsv_threshold_0_output = None

        self.__hsv_threshold_1_input = self.resize_image_output
        self.__hsv_threshold_1_hue = [98.3050847457627, 149.94727592267134]
        self.__hsv_threshold_1_saturation = [45.62146892655367, 181.05448154657293]
        self.__hsv_threshold_1_value = [83.75011172432892, 190.04041188418918]

        self.hsv_threshold_1_output = None

        self.__cv_erode_0_src = self.hsv_threshold_0_output
        self.__cv_erode_0_kernel = None
        self.__cv_erode_0_anchor = (-1, -1)
        self.__cv_erode_0_iterations = 1.0
        self.__cv_erode_0_bordertype = cv2.BORDER_CONSTANT
        self.__cv_erode_0_bordervalue = (-1)

        self.cv_erode_0_output = None

        self.__cv_erode_1_src = self.hsv_threshold_1_output
        self.__cv_erode_1_kernel = None
        self.__cv_erode_1_anchor = (-1, -1)
        self.__cv_erode_1_iterations = 2.0
        self.__cv_erode_1_bordertype = cv2.BORDER_CONSTANT
        self.__cv_erode_1_bordervalue = (-1)

        self.cv_erode_1_output = None

        self.__find_contours_0_input = self.cv_erode_0_output
        self.__find_contours_0_external_only = False

        self.find_contours_0_output = None

        self.__find_contours_1_input = self.cv_erode_1_output
        self.__find_contours_1_external_only = False

        self.find_contours_1_output = None

        


    def process(self, source0, gametype):
        """
        Runs the pipeline and sets all outputs to new values.
        """
        
        # Step Resize_Image0:
        self.__resize_image_input = source0
        (self.resize_image_output) = self.__resize_image(self.__resize_image_input, self.__resize_image_width, self.__resize_image_height, self.__resize_image_interpolation)

        if gametype == 0:
            # Step HSV_Threshold0:
            self.__hsv_threshold_0_input = self.resize_image_output
            (self.hsv_threshold_0_output) = self.__hsv_threshold(self.__hsv_threshold_0_input, self.__hsv_threshold_0_hue, self.__hsv_threshold_0_saturation, self.__hsv_threshold_0_value)

            # Step CV_erode0:
            self.__cv_erode_0_src = self.hsv_threshold_0_output
            (self.cv_erode_0_output) = self.__cv_erode(self.__cv_erode_0_src, self.__cv_erode_0_kernel, self.__cv_erode_0_anchor, self.__cv_erode_0_iterations, self.__cv_erode_0_bordertype, self.__cv_erode_0_bordervalue)

            # Step Find_Contours0:
            self.__find_contours_0_input = self.cv_erode_0_output
            (self.find_contours_0_output) = self.__find_contours(self.__find_contours_0_input, self.__find_contours_0_external_only)
        else:
            # Step HSV_Threshold1:
            self.__hsv_threshold_1_input = self.resize_image_output
            (self.hsv_threshold_1_output) = self.__hsv_threshold(self.__hsv_threshold_1_input, self.__hsv_threshold_1_hue, self.__hsv_threshold_1_saturation, self.__hsv_threshold_1_value)

            # Step CV_erode1:
            self.__cv_erode_1_src = self.hsv_threshold_1_output
            (self.cv_erode_1_output) = self.__cv_erode(self.__cv_erode_1_src, self.__cv_erode_1_kernel, self.__cv_erode_1_anchor, self.__cv_erode_1_iterations, self.__cv_erode_1_bordertype, self.__cv_erode_1_bordervalue)

            # Step Find_Contours1:
            self.__find_contours_1_input = self.cv_erode_1_output
            (self.find_contours_1_output) = self.__find_contours(self.__find_contours_1_input, self.__find_contours_1_external_only)


    @staticmethod
    def __resize_image(input, width, height, interpolation):
        """Scales and image to an exact size.
        Args:
            input: A numpy.ndarray.
            Width: The desired width in pixels.
            Height: The desired height in pixels.
            interpolation: Opencv enum for the type fo interpolation.
        Returns:
            A numpy.ndarray of the new size.
        """
        return cv2.resize(input, ((int)(width), (int)(height)), 0, 0, interpolation)

    @staticmethod
    def __hsv_threshold(input, hue, sat, val):
        """Segment an image based on hue, saturation, and value ranges.
        Args:
            input: A BGR numpy.ndarray.
            hue: A list of two numbers the are the min and max hue.
            sat: A list of two numbers the are the min and max saturation.
            lum: A list of two numbers the are the min and max value.
        Returns:
            A black and white numpy.ndarray.
        """
        out = cv2.cvtColor(input, cv2.COLOR_BGR2HSV)
        return cv2.inRange(out, (hue[0], sat[0], val[0]),  (hue[1], sat[1], val[1]))

    @staticmethod
    def __cv_erode(src, kernel, anchor, iterations, border_type, border_value):
        """Expands area of lower value in an image.
        Args:
           src: A numpy.ndarray.
           kernel: The kernel for erosion. A numpy.ndarray.
           iterations: the number of times to erode.
           border_type: Opencv enum that represents a border type.
           border_value: value to be used for a constant border.
        Returns:
            A numpy.ndarray after erosion.
        """
        return cv2.erode(src, kernel, anchor, iterations = (int) (iterations +0.5),
                            borderType = border_type, borderValue = border_value)

    @staticmethod
    def __find_contours(input, external_only):
        """Sets the values of pixels in a binary image to their distance to the nearest black pixel.
        Args:
            input: A numpy.ndarray.
            external_only: A boolean. If true only external contours are found.
        Return:
            A list of numpy.ndarray where each one represents a contour.
        """
        if(external_only):
            mode = cv2.RETR_EXTERNAL
        else:
            mode = cv2.RETR_LIST
        method = cv2.CHAIN_APPROX_SIMPLE
        contours, hierarchy =cv2.findContours(input, mode=mode, method=method)
        ###END GRIP STUFF###
        
        #own stuff

        #finds width, height, the and the coordinates of one of the verticies
        if contours:

            

            c = max(contours, key=cv2.contourArea)

            #creates a bounding rect, finds the center of the rect for rotation
            
            x, y, w, h = cv2.boundingRect(c)
            centerw = w / 2
            centerh = h / 2
            area = w*h

            #draws a rectangle onto "input", where (x,y) are one vertice, and (x+width, y+height) is the opposite one.
            cv2.rectangle(input,(x,y),(x+w,y+h),(135,50,30),3)
            cv2.circle(input, (int(x+centerw),int(y+centerh)),5,(135,50,30),-1)
            cv2.imshow("result",input)

            return centerh, centerw, x, y, w, h, area
        else:
            return None